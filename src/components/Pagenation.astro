---
type Props = {
  page: {
    start: number;
    end: number;
    size: number;
    total: number;
    currentPage: number;
    lastPage: number;
    url: {
      current: string;
      first?: string;
      last?: string;
      prev?: string;
      next?: string;
    };
    data: Array<{
      id: string;
      data: {
        title: string;
        description: string;
        tags: string[];
      };
    }>;
  };
  baseUrl?: string;
};

const { page, baseUrl = "" }: Props = Astro.props;
function pages(current: number, last: number) {
  if (last <= 7) return Array.from({ length: last }, (_, i) => i + 1);
  if (current < 5) {
    return [1, 2, 3, 4, 5, 0, last];
  }
  if (current > last - 4) {
    return [1, 0, last - 4, last - 3, last - 2, last - 1, last];
  }
  return [1, 0, current - 1, current, current + 1, 0, last];
}

function getPageUrl(pageNumber: number) {
  return pageNumber === 1 ? page.url.first : `${baseUrl}/${pageNumber}`;
}
---

<div class="pagenation">
  {
    pages(page.currentPage, page.lastPage).map((p) => {
      if (p === 0) {
        return <span>â€¦</span>;
      }
      if (p === page.currentPage) {
        return <span class="currentPage">{p}</span>;
      }
      return (
        <a href={getPageUrl(p)} class="pageLink">
          {p}
        </a>
      );
    })
  }
</div>

<style>
  .pagenation {
    padding: 1rem;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 10px;
  }

  .currentPage,
  .pageLink {
    width: 36px;
    height: 36px;
    display: grid;
    place-items: center;
    border: 1px solid var(--color-border);
    border-radius: 18px;
    color: var(--color-border);
    transition: 0.3s;
    box-shadow: unset;
  }

  .currentPage {
    background-color: var(--color-border);
    color: var(--color-bg);
  }

  .pageLink:hover {
    transform: translate(-1px, -1px);
    box-shadow: 2px 2px 0px var(--color-border);
  }
</style>
